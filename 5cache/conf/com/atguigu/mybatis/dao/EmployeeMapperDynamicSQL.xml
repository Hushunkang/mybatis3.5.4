<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.mybatis.dao.EmployeeMapperDynamicSQL">

    <!-- 查询员工，要求，传入的sql参数employee携带了哪些字段，查询条件就带上这些字段 -->
    <!--
    • if：表示如果，判断标签
    • choose（when，otherwise）：表示分支选择，相当于带了break语句的switch-case语句体
      如果带了id就用id查，如果带了lastName就用last_name查，只会进入选择结构的其中一个分支
    • trim：表示字符串截取（where（封装查询条件），set（封装修改条件））
    • foreach：遍历集合
	 -->
    <select id="getEmpsByConditionIf" resultType="emp">
        select * from tbl_employee
        <!-- where -->
        <where>
            <!--
            test：表示判断的表达式（用的是OGNL表达式，Apache下的一个开源项目，类似于JSTL）
            OGNL表达式可以参照ppt课件或者官方文档来了解学习
            <if test="id != null">表示从sql参数中取值来进行判断
            遇见xml文件中的特殊字符应该去写其对应的转义字符
            -->
            <if test="id != null">
                and id=#{id}
            </if>
            <!-- <if test="lastName != null &amp;&amp; lastName != &quot;&quot;"> -->
            <if test="lastName != null and lastName != ''">
                and last_name like #{lastName}
            </if>
            <!--
            OGNL表达式会进行数字与字符串转换判断  0 == "0"
            如果gender为char类型，必须要这样写gender == '0'
            如果gender为String类型
                情况1：纯数字类型的字符串可以省略掉双引号，若要加双引号也可以，但必须是转移字符形式的双双引号，即&quot;&quot;
                情况2：非纯数字类型的字符串，用双单引号，报错方案不可取
                情况3：非纯数字类型的字符串，用双双引号，但必须是转移字符形式的双双引号，即&quot;&quot;
            总结：如果是字符类型的数据做判断，使用双单引号
                 如果是字符串类型的数据做判断的时候，用转移字符形式的双双引号是肯定不会错滴
            -->
            <if test="gender == '0' or gender == '1'">
                and gender=#{gender}
            </if>
            <if test="email != null and email.trim() != ''">
                and email=#{email}
            </if>
        </where>
    </select>

    <select id="getEmpsByConditionTrim" resultType="emp">
        select * from tbl_employee
        <!--
        后面多出的and或者or，where标签不能解决
        使用trim标签可以解决这种问题，trim标签体中是整个字符串拼串后的结果
        prefix=""：给拼串后的整个字符串加一个前缀
        prefixOverrides=""：前缀重写，去掉整个字符串前面多余的字符串
        suffix=""：给拼串后的整个字符串加一个后缀
        suffixOverrides=""：后缀重写，去掉整个字符串后面多余的字符串
        -->
        <trim prefix="where" suffixOverrides="and">
            <if test="id != null">
                id=#{id} and
            </if>
            <if test="lastName != null &amp;&amp; lastName != &quot;&quot;">
                last_name like #{lastName} and
            </if>
            <if test="gender == '0' or gender == '1'">
                gender=#{gender} and
            </if>
            <if test="email != null and email.trim() != &quot;&quot;">
                email=#{email} and
            </if>
        </trim>
    </select>

    <select id="getEmpsByConditionChoose" resultType="com.atguigu.mybatis.bean.Employee">
        select * from tbl_employee
        <where>
            <!-- 如果带了id就用id查，如果带了lastName就用last_name查，只会进入选择结构的其中一个分支 -->
            <choose>
                <when test="id != null">
                    id=#{id}
                </when>
                <when test="lastName != null &amp;&amp; lastName.trim() != &quot;&quot;">
                    last_name like #{lastName}
                </when>
                <when test="email != null &amp;&amp; email.trim() != &quot;&quot;">
                    email=#{email}
                </when>
                <otherwise>
                    gender=#{gender}
                </otherwise>
            </choose>
        </where>
    </select>

    <update id="updateEmp">
        <!-- set标签的使用，可以去掉多余的,逗号 -->
        update tbl_employee
        <set>
            <if test="lastName != null">
                last_name=#{lastName},
            </if>
            <if test="gender != null and (gender == '0' or gender == '1')">
                gender=#{gender},
            </if>
            <if test="email != null">
                email=#{email},
            </if>
        </set>
        where id=#{id}
        <!--
        Trim标签：
        update tbl_employee
        <trim prefix="set" suffixOverrides=",">
            <if test="lastName!=null">
                last_name=#{lastName},
            </if>
            <if test="email!=null">
                email=#{email},
            </if>
            <if test="gender!=null">
                gender=#{gender},
            </if>
        </trim>
        where id=#{id}
        -->
    </update>

    <select id="getEmpsByConditionForeach" resultType="com.atguigu.mybatis.bean.Employee">
        select * from tbl_employee
        <!--
            collection：表示要遍历的集合
            细节：list类型的sql参数会特殊处理，封装在map中，map的key就叫list
            item：表示遍历集合中的每一个数据元素赋值给item_id
            separator：表示每个元素之间的分隔符
            open：拼接结果的开始标识
            close：拼接结果的结束标识
            index：索引
                   遍历list集合的时候index就是索引，item就是当前值
                   遍历map集合的时候index不表示索引，而是表示map的key，item就是map的value
            #{变量名}：能取出变量值，也就是当前遍历出的数据元素
        -->
        <foreach collection="ids" item="item_id" separator=","
                 open="where id in(" close=")" index="i">
            #{item_id}
        </foreach>
    </select>

    <!--
	  	1、sql标签经常要查询的列名，或者插入用的列名抽取出来方便引用
	  	2、include标签用来引用已经抽取的sql
	  	3、include标签还可以自定义一些property，sql标签内部就能使用自定义的属性
	  	   include-property，取值的正确方式${prop}，#{不能使用这种方式}
	  -->
    <sql id="insertColumn">
        <if test="_databaseId == 'mysql'">
            last_name,gender,email,d_id
        </if>
        <if test="_databaseId == 'oracle'">
            EMPNO,ENAME
        </if>
    </sql>

    <!-- MySQL下的批量保存方式：1、用foreach遍历实现；2、MySQL还支持values(),(),()语法，Oracle不支持这样的语法 -->
<!--    <insert id="addEmps">-->
<!--        insert into tbl_employee(-->
<!--        <include refid="insertColumn"></include>-->
<!--        )-->
<!--        values-->
<!--        <foreach collection="emps" item="emp" separator=",">-->
<!--            (#{emp.lastName},#{emp.gender},#{emp.email},#{emp.dept.id})-->
<!--        </foreach>-->
<!--    </insert>--><!-- 推荐使用 -->
    <!-- 这种方式需要设置数据库连接属性，allowMultiQueries=true -->
    <insert id="addEmps" databaseId="mysql">
        <foreach collection="emps" item="emp" separator=";">
            insert into tbl_employee(
            <include refid="insertColumn"></include>
            )
            values
            (#{emp.lastName},#{emp.gender},#{emp.email},#{emp.dept.id})
        </foreach>
    </insert><!-- 不推荐使用 -->

    <!--
    Oracle下的批量保存方式
    Oracle不支持values(),(),()语法
    Oracle支持的批量方式
    1、多个insert语句放在begin-end;里面，如下示例
    begin
        insert into employees(employee_id,last_name,email)
        values(employees_seq.nextval,'test_001','test_001@atguigu.com');
        insert into employees(employee_id,last_name,email)
        values(employees_seq.nextval,'test_002','test_002@atguigu.com');
    end;
    2、利用中间表
    insert into employees(employee_id,last_name,email)
       select employees_seq.nextval,lastName,email from(
              select 'test_a_01' lastName,'test_a_e01' email from dual
              union或者union all
              select 'test_a_02' lastName,'test_a_e02' email from dual
              union或者union all
              select 'test_a_03' lastName,'test_a_e03' email from dual
    );
    -->
<!--    <insert id="addEmps" databaseId="oracle">-->
<!--        <foreach collection="emps" item="emp" open="begin" close="end;">-->
<!--            insert into EMP(-->
<!--            <include refid="insertColumn"></include>-->
<!--            )-->
<!--            values(SEQ_EMP.nextval,#{emp.lastName});-->
<!--        </foreach>-->
<!--    </insert>-->
    <insert id="addEmps" databaseId="oracle">
        insert into EMP(
        <include refid="insertColumn"></include>
        )
        <foreach collection="emps" item="emp" separator="union"
                 open="select SEQ_EMP.nextval,ENAME from("
                 close=")">
            select #{emp.lastName} ENAME from dual
        </foreach>
    </insert>

    <!--
    mybatis默认的两个内置参数，不只是方法传递过来的sql参数可以被用来判断，取值等操作。。。mybatis默认还有两个内置参数
	_parameter：代表整个方法传递过来的sql参数
	 		    单个参数：_parameter就是这个参数
	 		    多个参数：多个参数会被封装为一个map，_parameter就是这个map
	_databaseId：若在mybatis的全局配置文件中配置了databaseIdProvider标签，_databaseId表示数据库厂商的标识的别名
	-->
    <select id="getEmpsTestInnerParameter" resultType="com.atguigu.mybatis.bean.Employee">
        <!-- bind：可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值 -->
        <bind name="_lastName" value="'%'+lastName+'%'"/>
        <if test="_databaseId == 'mysql'">
            select * from tbl_employee
            <if test="_parameter != null">
                <!-- where last_name like '%#{lastName}%' 这种方式直接不行 -->
                <!-- where last_name like '%${lastName}%' 这种方式可以，但是存在安全问题，不推荐使用 -->
                where last_name like #{_lastName}<!-- 模糊查询推荐使用的方式，bind标签 -->
            </if>
        </if>
        <if test="_databaseId == 'oracle'">
            select EMPNO id,ENAME lastName from EMP
            <if test="_parameter != null">
                where ENAME like #{_parameter.lastName}
            </if>
        </if>
    </select>

</mapper>
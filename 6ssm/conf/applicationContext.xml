<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd">

    <!-- 除了不扫描业务逻辑控制器，其它的我都要扫描 -->
    <context:component-scan base-package="com.atguigu.mybatis">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <!-- 在spring的配置文件中引入properties资源文件 -->
    <context:property-placeholder location="classpath:dbconfig.properties"></context:property-placeholder>

    <!-- 配置druid数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <!-- 使用外部资源文件中的属性 -->
        <property name="username" value="${jdbc.mysql.username}"></property>
        <property name="password" value="${jdbc.mysql.password}"></property>
        <property name="url" value="${jdbc.mysql.url}"></property>
        <property name="driverClassName" value="${jdbc.mysql.driverClassName}"></property>
        <property name="initialSize" value="${jdbc.mysql.initialSize}"></property>
        <property name="maxActive" value="${jdbc.mysql.maxActive}"></property>
    </bean>

    <!-- 配置spring的事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 开启基于注解的事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>

    <!-- spring整合mybatis -->
    <!-- 整合目的：
    1、由spring来管理所有组件（java类），包括mybatis的dao层Mapper接口的实现类
       service依赖dao直接使用@Autowire注解依赖注入即可，不需要原生的复杂的一系列操作
    2、能够使用spring声明式事务，用spring来管理事务很方便
    -->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <!-- configLocation：指定mybatis的全局配置文件的位置 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <!--mapperLocations: 指定mybatis的sql映射文件的位置-->
        <property name="mapperLocations" value="classpath:mybatis/mapper/*.xml"></property>
    </bean>

    <!-- 配置一个可以进行批量执行的sqlSession -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactoryBean"></constructor-arg>
        <constructor-arg name="executorType" value="BATCH"></constructor-arg>
    </bean>

    <!--
    扫描所有的mybatis的dao层Mapper接口的实现，让这些Mapper接口的实现能够自动注入
    base-package：指定mybatis的dao层Mapper接口的包名
    说明：这一步其实是将mybatis动态生成的dao层Mapper接口的实现类注册到spring ioc容器里面，要用的话就di
    -->
    <mybatis-spring:scan base-package="com.atguigu.mybatis.dao"/>
    <!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.atguigu.mybatis.dao"></property>
	</bean> --><!-- 老版本项目使用滴 -->

</beans>
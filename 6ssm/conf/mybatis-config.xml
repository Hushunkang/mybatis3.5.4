<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <!--
		1、mybatis可以使用properties标签来引入外部properties资源文件
		resource：引入类路径下的资源
		url：引入磁盘路径下或者网络路径下的资源
	-->
    <properties resource="dbconfig.properties"/>

    <!--
		2、settings：可以包含很多mybatis重要的设置项
		   setting：用来设置每一个设置项
		   name：设置项名
		   value：设置项值
	-->
    <settings>
        <!-- mybatis中开启驼峰命名规则映射 -->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <setting name="jdbcTypeForNull" value="NULL"/>
        <!-- 最好是显示的指定每一个我们需要更改的配置项，即使他是默认滴，也配置一哈，避免版本更新带来问题 -->
        <setting name="lazyLoadingEnabled" value="true"/>
        <setting name="aggressiveLazyLoading" value="false"/>
        <setting name="cacheEnabled" value="true"/><!-- 开启mybatis的二级缓存 -->
    </settings>

    <!--
        3、typeAliases：mybatis别名处理器，可以为java类型起别名，注意别名不区分大小写
	-->
    <typeAliases>
        <!--
            3.1、typeAlias:为某一个java类型起别名
                 type:指定要起别名的java类型的全类名，默认别名就是类名小写形式，employee
                 alias:指定新的别名
        -->
        <!-- <typeAlias type="com.atguigu.mybatis.bean.Employee" alias="emp"/> -->

        <!--
            3.2、package:为某一个包下的所有类批量起别名
                 name：指定包名（为当前包以及其子包的每一个类都起一个默认别名）
        -->
        <package name="com.atguigu.mybatis.bean"/>

        <!--
            3.3、批量起别名的情况下，还使用@Alias注解为某一个类型指定新的别名
        -->
    </typeAliases>

    <!--
		4、environments：环境们，mybatis可以配置多种环境，default属性用来指定使用的环境，可以达到快速切换环境
		   environment：配置一个具体的环境信息，必须有两个标签；id代表当前环境的唯一标识
		   transactionManager：事务管理器
		   type：事务管理器的类型，JDBC(JdbcTransactionFactory)
		                         |MANAGED(ManagedTransactionFactory)
				 自定义事务管理器：实现TransactionFactory接口，type为全类名
		   dataSource：数据源
		   type:数据源类型，UNPOOLED(UnpooledDataSourceFactory)
						   |POOLED(PooledDataSourceFactory)
						   |JNDI(JndiDataSourceFactory)
		   自定义数据源（比如dbcp、c3p0、Driud等数据库连接池）：实现DataSourceFactory接口，type为全类名
	-->
    <environments default="dev_mysql">
        <environment id="dev_mysql">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.mysql.driver}"/>
                <property name="url" value="${jdbc.mysql.url}"/>
                <property name="username" value="${jdbc.mysql.username}"/>
                <property name="password" value="${jdbc.mysql.password}"/>
            </dataSource>
        </environment>

        <environment id="test">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.mysql.driver}"/>
                <property name="url" value="${jdbc.mysql.url}"/>
                <property name="username" value="${jdbc.mysql.username}"/>
                <property name="password" value="${jdbc.mysql.password}"/>
            </dataSource>
        </environment>

        <environment id="dev_oracle">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.oracle.driver}"/>
                <property name="url" value="${jdbc.oracle.url}"/>
                <property name="username" value="${jdbc.oracle.username}"/>
                <property name="password" value="${jdbc.oracle.password}"/>
            </dataSource>
        </environment>
    </environments>

    <!--
        5、databaseIdProvider：支持多数据库厂商
		   type="DB_VENDOR"对应VendorDatabaseIdProvider
		   作用就是得到数据库厂商的标识，mybatis就能根据数据库厂商标识来执行不同的sql
		   sql server的标识是这样的SQL Server，mysql的标识是这样的MySQL，oracle的标识是这样的Oracle等
		   说明：数据库厂商标识是不同的jdbc驱动（SQL Server的jdbc驱动、MySQL的jdbc驱动、Oracle的jdbc驱动等）自带的
		        查看jdbc接口/规范文档（其实在javase的api文档中）通过getDatabaseProductName()方法获取是哪一种类型的数据库
	-->
    <databaseIdProvider type="DB_VENDOR">
        <!-- 为不同的数据库厂商起别名 -->
        <property name="SQL Server" value="sql server"/>
        <property name="MySQL" value="mysql"/>
        <property name="Oracle" value="oracle"/>
    </databaseIdProvider>

    <!-- 说明：看源码org.apache.ibatis.session.Configuration类的构造器，在构造器中使用注册别名做了很多事物的映射 -->

    <!-- 一定要将写好的mybatis的sql映射文件注册到mybatis的全局配置文件中 -->
    <!-- 6、mappers：将sql映射文件注册到全局配置文件中 -->
    <mappers>
        <!--
            mapper：注册一个sql映射文件
            resource：引入类路径下的sql映射文件mybatis/mapper/EmployeeMapper.xml
		    url：引入磁盘路径下或者网络路径下的sql映射文件file:///var/mappers/AuthorMapper.xml
            注册接口
            class：注册接口（上面的resource和url使用的是注册配置文件）
                情况1、有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下
                情况2、没有sql映射文件，所有的sql都是利用注解写在接口上
                推荐：
                    比较重要的sql，复杂的Dao接口我们来写sql映射文件的方式
                    不重要的sql，简单的Dao接口，为了开发快速，我们可以使用注解的方式
        -->
<!--         <mapper resource="mybatis/mapper/EmployeeMapper.xml"/>-->
<!--         <mapper class="com.atguigu.mybatis.dao.EmployeeMapperAnnotation"/>-->

        <!-- 批量注册，要求mapper接口和sql映射文件在同一个包下 -->
        <package name="com.atguigu.mybatis.dao"/>
    </mappers>

    <!-- 细节说明：mybatis的全局配置文件中配置标签是有先后顺序约束滴！！！ -->

</configuration>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
namespace：命名空间，指定dao层Mapper接口的全类名
id：唯一标识一个查询/更新sql
resultType：查询的结果映射到哪个类
#{id}：从传递过来的参数中取出id值
-->
<mapper namespace="com.atguigu.mybatis.dao.EmployeeMapperPlus">

    <!-- resultMap表示自定义Java类与数据库表映射规则 -->
    <resultMap id="myEmpSimple" type="com.atguigu.mybatis.bean.Employee">
        <id property="id" column="id"></id><!-- 定义主键列的封装规则，底层会有优化 -->
        <result property="lastName" column="last_name"></result><!-- 定义非主键列的封装规则 -->
        <result property="gender" column="gender"></result>
        <result property="email" column="email"></result>
    </resultMap>

    <!-- 方式一：连接查询，级联属性结果映射 -->
    <resultMap id="myEmpComplex" type="com.atguigu.mybatis.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <result column="did" property="dept.id"/>
        <result column="dept_name" property="dept.departmentName"/>
    </resultMap>

    <!-- 方式二：连接查询，级联属性结果映射 -->
    <resultMap id="myEmpComplex2" type="com.atguigu.mybatis.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <!--
        association表示指定关联的javabean
        property="dept"：指定哪个属性是被关联滴
        javaType:指定这个属性的数据类型的全类名，不能省略
		-->
        <association property="dept" javaType="com.atguigu.mybatis.bean.Department">
            <id column="did" property="id"/>
            <result column="dept_name" property="departmentName"/>
        </association>
    </resultMap>

<!--    <select id="getEmpById" resultType="emp">-->
<!--        select * from tbl_employee where id=#{id}-->
<!--    </select>-->

    <select id="getEmpById" resultMap="myEmpSimple">
        select * from tbl_employee where id=#{id}
    </select>

    <!--
    场景一：
    查询员工的时候查询员工对应的部门
    一个员工有与之对应的部门信息
    -->
<!--    <select id="getEmpAndDept" resultMap="myEmpComplex">-->
    <select id="getEmpAndDept" resultMap="myEmpComplex2">
        select e.id id,e.last_name last_name,e.gender gender,e.email email,e.d_id d_id,
               d.id did,d.dept_name dept_name
        from tbl_employee e,tbl_dept d
        where e.d_id=d.id and e.id=#{id}
    </select>

    <!-- 使用association进行分步查询 -->
    <!--
    1、根据员工id去员工表中查询员工信息
	2、根据查询到的员工信息中d_id值去部门表查出部门信息
	3、将部门信息设置到员工信息当中
    -->
    <resultMap id="myEmpByStep" type="com.atguigu.mybatis.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
        <!--
        association表示指定关联的javabean
        property：关联的属性
        select：表明关联的属性是调用select指定方法查询的结果
        column：指定将哪一列的值传给这个方法
        流程：使用select指定分步查询的方法并查询出关联的javabean，然后赋值给关联的属性
        -->
        <association property="dept"
                     select="com.atguigu.mybatis.dao.DepartmentMapper.getDeptById"
                     column="d_id">
        </association>
    </resultMap>

<!--    <select id="getEmpByIdStep" resultMap="myEmpByStep">-->
    <select id="getEmpByIdStep" resultMap="MyEmpDis">
        select * from tbl_employee where id=#{id}
    </select>

    <!-- 使用association进行分步查询的好处还可以进行延迟加载（懒加载、按需加载） -->
    <!--
    分步查询的延迟加载：
    分步查询的前提下，没有使用延迟加载滴时候，我们每次查询员工的同时都会关联的去查询一下部门
    这样一下子就给分步查询流程中涉及到的所有sql都执行了一哈，这样增加了数据库服务器的压力
    我们期望能够懒加载，只有真正用到了部门信息的时候我们再去执行分步查询流程中涉及到查询部门的那个sql
    如何实现分步查询的延迟加载
    在mybatis的全局配置文件中加上两个配置即可
    <setting name="lazyLoadingEnabled" value="true"/>
    <setting name="aggressiveLazyLoading" value="false"/>
    -->

    <!--
    场景二：
    查询部门的时候查询部门下面所有员工
    一个部门有与之对应的所有员工信息
    注释信息请看DepartmentMapper.xml中说明
    -->

    <!-- mybatis discriminator鉴别器 -->
    <!--
    <discriminator javaType=""></discriminator>
    discriminator鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为
    以封装Employee为例来说明：
            如果查出的是女生：就把部门信息查询出来，否则不用
            如果查出的是男生：把last_name这一列的值赋值给email
     -->
    <resultMap id="MyEmpDis" type="com.atguigu.mybatis.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
        <!--
            column：指定判定的列
            javaType：列所对应的java类型（细节mybatis为每一个常用java类都取了别名，这里用string表示java.lang.String即可）
        -->
        <discriminator column="gender" javaType="string">
            <!-- 0表示女生，resultType指定数据封装的结果类型，不能缺少或者指定resultMap也行 -->
            <case value="0" resultType="com.atguigu.mybatis.bean.Employee">
                <association property="dept"
                             select="com.atguigu.mybatis.dao.DepartmentMapper.getDeptById"
                             column="d_id">
                </association>
            </case>
            <!-- 1表示男生，把last_name这一列的值赋值给email -->
            <case value="1" resultType="com.atguigu.mybatis.bean.Employee">
                <id column="id" property="id"/>
                <result column="last_name" property="lastName"/>
                <result column="gender" property="gender"/>
                <result column="last_name" property="email"/>
            </case>
        </discriminator>
    </resultMap>

</mapper>